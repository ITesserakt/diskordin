plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.61'
    id "com.jfrog.bintray" version "1.8.4"
    id "maven-publish"
}
apply plugin: 'kotlin-kapt'

group 'org.tesserakt.diskordin'
version System.getProperty("diskordin.version", diskordin_version)

bintray {
    user = System.getProperty("bintray.user")
    key = System.getProperty("bintray.key")
    publications = ['mavenPublication']

    pkg {
        repo = "diskordin"
        name = "diskordin"
        licenses = ["Apache-2.0"]
        vcsUrl = "https://github.com/ITesserakt/diskordin.git"

        version {
            name = version
            released = new Date()
        }
    }
}

repositories {
    jcenter()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-rx2:$coroutines_version"

    compile "io.arrow-kt:arrow-core:$arrow_version"
    compile "io.arrow-kt:arrow-syntax:$arrow_version"
    compile "io.arrow-kt:arrow-fx:$arrow_version"
    compile "io.arrow-kt:arrow-fx-rx2:$arrow_version"
    compile "io.arrow-kt:arrow-core-data:$arrow_version"
    compile "io.arrow-kt:arrow-integration-retrofit-adapter:$arrow_version"
    compile "io.arrow-kt:arrow-mtl:$arrow_version"
    compile "io.arrow-kt:arrow-mtl-data:$arrow_version"
    compile "io.arrow-kt:arrow-free-data:$arrow_version"
    compile "io.arrow-kt:arrow-free:$arrow_version"
    kapt "io.arrow-kt:arrow-meta:$arrow_version"

    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
    implementation 'com.squareup.okhttp3:logging-interceptor:3.4.0'
    implementation "com.tinder.scarlet:scarlet:$scarlet_version"
    implementation "com.tinder.scarlet:protocol-websocket-okhttp:$scarlet_version"

    compile "io.github.microutils:kotlin-logging:$kotlin_logging_version"

    testImplementation "org.junit.jupiter:junit-jupiter-api:$junit_version"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit_version"
    testCompile "org.junit.jupiter:junit-jupiter-params:$junit_version"
    testImplementation "org.amshove.kluent:kluent:$kluent_version"
    testCompile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
    testCompile group: 'ch.qos.logback', name: 'logback-core', version: '1.2.3'
    testCompile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
    testImplementation "io.mockk:mockk:1.9.3"
}

test {
    useJUnitPlatform()
    failFast false
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs = ["-XXLanguage:+InlineClasses", "-Xuse-experimental=kotlin.Experimental"]
    }
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

wrapper {
    gradleVersion = '6.0'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.convention 'source'
    archiveClassifier.set 'source'
    from sourceSets.main.allSource
}

javadoc.failOnError = false
task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.convention 'javadoc'
    archiveClassifier.set 'javadoc'
    from javadoc.destinationDir
}

def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
        }
    }

    developers {
        developer {
            id "ITesserakt"
            name "Vladimir Nikitin"
            email "potryas66@mail.ru"
        }
    }
}

publishing {
    publications {
        mavenPublication(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar

            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'A lightweight wrapper written in Kotlin for Discord API using Arrow')
                root.appendNode('name', 'Diskordin')
                root.appendNode('url', 'https://github.com/ITesserakt/diskordin')
                root.children().last() + pomConfig
            }
        }
    }
}